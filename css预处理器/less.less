// 注释
// 以 // 开头的注释 是不会被编译的
/* 这种注释是可以暴露出去的 */


// less中的变量
   // 使用@来声明一个变量：@pink: pink;
        // 1.作为普通属性来使用：直接使用@ping；
        // 2.作为选择器和属性名：@{selector}；
        // 3.作为URL：@{url}
        // 4.变量的延迟加载（可以理解存在块级作用域，变量提升）
#test2{ // 4.变量的延迟加载
    @var:2x;
        .aa{
            @var: 1px;
            margin: @var;  // 3px
            @var: 3px;
        }
    margin: @var; // 2px
}

// 值 变成 变量
@color: pink;
// 属性 变成 变量
@m: margin;
// 选择器 变成 变量
@selector: #test;

@{selector}{
    background: @color;
    @{m}: margin;
}

// less中的嵌套规则
    // 1.基本嵌套规则
    // 2.&的使用 （写在嵌套里面，可以表示平级）


// less中的混合
    // 混合就是奖将一系列属性从一个规则集引入到另外一个规则集的方式
        // 1.普通混合  （缺点：会编译到css文件里面去）
        // 2.不带输出的混合   （不会编译到css文件里面去）
        // 3.带参数的混合
        // 4.带参数且有默认值的混合
        // 5.带出多个参数的混合
        // 6.带命名参数的混合
        // 7.匹配模式
        // 8.arguments配置


.juzhong(@a, @b, @c){  // 这种会被输出
    // 这里面的代码会被复制到应用的地方去,下面两个inner
    // 这里要调用@a, @b, @c
}

.juzhong(){  // 这种不会被输出 只是不会被编译到css里面去，效果还是有的
    // 这里面的代码会被复制到应用的地方去,下面两个inner
}


.juzhong(@a：100px, @b: 200px, @c: blue){  // 带默认参数的混合
    // 这里面的代码会被复制到应用的地方去,下面两个inner
    // 这里要调用@a, @b, @c
}
.inner{
    .juzhong(200px, 300px, pink); // 编译后能拿到代码
}
.inner2{
    .juzhong(); // 编译后能拿到代码,这里可以自己添加默认参数
}

// 6.带命名参数的混合
.inner2{
    .juzhong(@c: black); // 指定第三个参数的值位black 
}

// 7.匹配模式
.triangle(@_) {
    // 这里面用到下面去
}

.triangle() {
    // xxx:xxx
}


// less 中的运算
    // 在less中可以进行加减乘除的运算
.inner {
    width: (200 + 200px);
}


// less 中的继承
    // 性能比混合高，但是灵活性比混合低

// less 避免编译
    // 使用~" xx:xx "; 就会不走less编译
.ccc{
     padding: ~"cacl(100px + 20%)";
}